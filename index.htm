<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <style>

  </style>
  <title>The Solar System</title>
  <script type="text/javascript" src="../libs/three.js"></script>
  <script type="text/javascript" src="../libs/stats.js"></script>
  <script type="text/javascript" src="../libs/OrbitControls.js"></script>
  <script type="text/javascript" src="../libs/dat.gui.js"></script>
  <script type="text/javascript" src="../libs/WebGL.js"></script>

</head>
<body>
  <div id="Stats-output">
  </div>
  <div id="WebGL-output">
  </div>

<script type="text/javascript">

  if (WEBGL.isWebGLAvailable() === false) {
    document.body.appendChild(WEBGL.getWebGLErrorMessage());
  }

  init();
  animate();

  var scene, stats, axes, controls, camera, renderer;
  var sun, earth, mars, mercury, moon, neptune, uranus, venus;

  function init() {
    scene = new THREE.Scene();
    //scene.background = new THREE.Color(0xaaaaaa);
    //scene.fog = new THREE.FogExp2(0xcccccc, 0.002);

    stats = initStats();

    axes = new THREE.AxesHelper(2000);
    scene.add(axes);

    camera = new THREE.PerspectiveCamera(60,window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.set(1000, 300, 100);

    renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    renderer.setPixelRatio(window.devicePixelRatio );
    renderer.setSize(window.innerWidth, window.innerHeight );
    document.getElementById('WebGL-output').appendChild(renderer.domElement );

    //-----Controls-----//
    //此处设置为只可绕圆心旋转、缩放
    controls = new THREE.OrbitControls(camera, renderer.domElement );
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.screenSpacePanning = false;
    controls.minDistance = 100;
    controls.maxDistance = 2000;
    controls.maxPolorAngle = Math.PI / 2;

    //-----Geometry-----//
    sun = createMesh(new THREE.SphereGeometry(100, 20, 20), "sun.jpg");

    earth = createMesh(new THREE.SphereGeometry(30, 20, 20), "earth.jpg");
    earth.position.set(250, 0, 0);

    moon = createMesh(new THREE.SphereGeometry(15, 20, 20), "moon.jpg");
    moon.position.set(300, 0, 0);

    mars = createMesh(new THREE.SphereGeometry(40, 20, 20), "mars.jpg");
    mars.position.set(450, 0, 0);

    mercury = createMesh(new THREE.SphereGeometry(50, 20, 20), "mercury.jpg");
    mercury.position.set(750, 0, 0);

    neptune = createMesh(new THREE.SphereGeometry(60, 20, 20), "neptune.jpg");
    neptune.position.set(1150, 0, 0);

    uranus = createMesh(new THREE.SphereGeometry(65, 20, 20), "uranus.jpg");
    uranus.position.set(1500, 0, 0);

    venus = createMesh(new THREE.SphereGeometry(70, 20, 20), "venus.jpg");
    venus.position.set(1800, 0, 0);

    scene.add(sun);
    scene.add(earth);
    scene.add(moon);
    scene.add(mars);
    scene.add(mercury);
    scene.add(neptune);
    scene.add(uranus);
    scene.add(venus);

    //-----Lights-----//
    var sunlight1 = new THREE.DirectionalLight(0xffffff);
    sunlight1.position.set(1, 1, 1);
    scene.add(sunlight1);

    var sunlight2 = new THREE.DirectionalLight(0xffffff);
    sunlight2.position.set(-1, -1, -1);
    scene.add(sunlight2);

    var ambientLight = new THREE.AmbientLight(0xffffff);
    scene.add(ambientLight);

    //resize
    window.addEventListener('resize', onWindowResize, false);
  }

  //-----Stats-----//
  function initStats() {
    var stats = new Stats();
    stats.setMode(0);

    stats.domElement.style.position = 'absolute';
    stats.domElement.style.left = '10px';
    stats.domElement.style.top = '10px';

    document.getElementById('Stats-output').appendChild(stats.domElement);

    return stats;
  }

  //-----GUI-----//
  var gui = new dat.GUI();

  //-----CustomMesh-----//
  function createMesh(geometry, imageFile) {
    var loader = new THREE.TextureLoader();
    var texture = loader.load("textures/" + imageFile);
    var material = new THREE.MeshPhongMaterial();
    material.map = texture;

    var mesh = new THREE.Mesh(geometry, material);
    return mesh;
  }

  //
  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  //
  function animate() {
    sun.rotation.y += 0.15;
    requestAnimationFrame( animate );
    controls.update();
    render();
  }

  function render() {
    renderer.render(scene, camera);
  }
</script>

</body>
</html>
